#include <iostream>
using namespace std;
#include <fstream>
#include <iostream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <string>

const int BOARD_SIZE = 1000; // 1000
const int INPUT_SIZE = 500; //500
vector<string> ReadTheInput(){
    vector<string> theInput(INPUT_SIZE);
    ifstream inFS;
    // Open file
    inFS.open("input.txt");
    if (!inFS.is_open()) {
        cout << "Could not open file" << endl;
        exit(1);
    }
    // read the  file
    for (unsigned int j = 0; j < INPUT_SIZE; j++) {
        string currStr;
        getline(inFS, currStr, '\n'  );
        //inFS >> currStr;
        theInput.at(j) = currStr;

    }


    inFS.close();

    return theInput;

}

void Check(char theBoard[BOARD_SIZE][BOARD_SIZE]){
    theBoard[0][1] += 1;

};


vector<int> SwapPoints(vector<int> points){
    vector<int> newPoints;
    newPoints.at(0) = points.at(2);
    newPoints.at(1) = points.at(3);
    newPoints.at(2) = points.at(0);
    newPoints.at(3) = points.at(1);
    return newPoints;

}


void ChangeBoardVectorLine(vector<int> line, char theBoard[BOARD_SIZE][BOARD_SIZE]){
    int x1 = line.at(0);
    int x2 = line.at(2);
    int y1 = line.at(1);
    int y2 = line.at(3);



    if (x1 == x2 ){
        for (int i =0; i <= (fabs( y1 - y2 ) ); i++  ){
            int x = x1;
            int y;
            if (y1 < y2 ){
                y = y1 + i;
            } else {
                y = y2 + i;
            }
            if (theBoard[x][y] < 4){ //bc it's a character, only change it if it's less than 3, memory allocation fancy stuff (:
                theBoard[x][y] +=1;
            }

        }


    } else if (y1 == y2){
        for (int i =0; i <= (fabs( x1 - x2 ) ); i++  ){
            int y = y1;
            int x;
            if (x1 < x2 ){
                x = x1 + i;
            } else {
                x = x2 + i;
            }
            theBoard[x][y] +=1;
        }
    } else { //It's a diagonal

        if (x1 > x2) {
            //line = SwapPoints(line); // This way I only have to figure out if it's up or down
            x1 = line.at(2);
            y1 = line.at(3);
            x2 = line.at(0);
            y2 = line.at(1);

        }


        for (int i = 0; i <= (fabs(x1 - x2)); i++) {
            int y = y1;
            int x = x1;
            if (y1 < y2) { // the diagonal is going up and to the right//
                y = y1 + i;
            } else { //diagonal going down
                y = y1 - i;
            }
            x = x1 + i;
            //cout << "marking " << x << ", " << y << endl;
            if (theBoard[x][y] < 4) { //bc it's a character, only change it if it's less than 3, memory allocation fancy stuff (:
                theBoard[x][y] += 1; //Add a crossing to that spot
            }
        }
    }

}

int FindCrossings(char theBoard[BOARD_SIZE][BOARD_SIZE]){
    int total = 0;
    for (int i =0; i < BOARD_SIZE; i++){
        for (int j =0; j < BOARD_SIZE; j++){
            if (theBoard[i][j] > 2){
                total +=1;

            }
        }
    }
    return total;
};

void BoardToString(char theBoard[BOARD_SIZE][BOARD_SIZE]){
    theBoard[0][0] = 1;

    for (int i =0; i < BOARD_SIZE; i++){
        for (int j = 0; j < BOARD_SIZE; j++){
            //theBoard[i][j] = 1;
            cout << theBoard[j][i] << " ";
        }
        cout << endl;
    }

}

void LineToString(vector<int> line){
    cout << "(" <<  line.at(0) << ", " << line.at(1) << ")" << "(" <<  line.at(2) << ", " << line.at(3) << ")" <<  endl;
}

int main() {
    vector<string> input = ReadTheInput();
    vector<vector<int>> lines(INPUT_SIZE);
    static char theBoard[BOARD_SIZE][BOARD_SIZE];

    //SET UP BOARD
    for (int i =0; i < BOARD_SIZE; i++){
        for (int j = 0; j < BOARD_SIZE; j++){
            theBoard[i][j] = 1;
        }
    }

    //Check(theBoard); //Organize all the points into a vector
    for (int i =0; i < INPUT_SIZE; i++){
        string currInput = input.at(i);
        //cout << currInput << endl;
        int pos = currInput.find(",");
        int x1 = stoi( currInput.substr(0,pos) );
        currInput.erase(currInput.begin(), currInput.begin() + pos + 1);
        //pos length of string, this works because the length matches the 2nd position

        int pos2 = currInput.find(" ");
        int x2 = stoi( currInput.substr( 0, pos2) );
        currInput.erase(currInput.begin(), currInput.begin() + pos2 + 4); //erase extra because of the arrow

        int pos3 = currInput.find(",");
        int x3 = stoi( currInput.substr( 0, pos3) );
        currInput.erase(currInput.begin(), currInput.begin()+ pos3 + 1); //erase extra because of the arrow

        //string curr4 = currInput;
        int x4 = stoi(currInput);
        vector<int> myLine(4);
        myLine.at(0) = x1;
        myLine.at(1) = x2;
        myLine.at(2) = x3;
        myLine.at(3) = x4;


        //LineToString(myLine);
        lines.at(i) = myLine;
        //lines.push_back(myLine);

    } // creating line objects/points

    //ChangeBoardVectorLine(lines.at(8), theBoard);

    for (int i = 0; i < INPUT_SIZE; i++){
        ChangeBoardVectorLine(lines.at(i), theBoard);
    }
    //BoardToString(theBoard);
    cout << FindCrossings(theBoard) << endl;


    return 0;
}


 
