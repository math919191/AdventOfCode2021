#include <iostream>
using namespace std;
#include <fstream>
#include <iostream>
#include <vector>
#include <iomanip>
#include <cmath>
#include <string>
#include <algorithm>
#include <map>

int const INPUT_SIZE = 25; //7
vector<vector<string>> allPaths;



vector<string> ReadTheInput(){
    vector<string> theInput(INPUT_SIZE);
    ifstream inFS;
    // Open file
    inFS.open("input.txt");
    if (!inFS.is_open()) {
        cout << "Could not open file" << endl;
        exit(1);
    }
    // read the  file
    for (unsigned int j = 0; j < INPUT_SIZE; j++) {
        string currStr;
        getline(inFS, currStr, '\n'  );
        //inFS >> currStr;
        theInput.at(j) = currStr;
    }
    inFS.close();
    return theInput;
}

void PrintVect(vector<string> vect){

    for (int i = 0; i < vect.size(); i++){
        cout << vect.at(i) << " ";
    }
    cout << endl;
}

void AddIfNoDuplicates(string caveName, vector<string>&caveNames){
    for (int i = 0; i < caveNames.size(); i++){
        if (caveName == caveNames.at(i)){
            return;
        }
    }
    caveNames.push_back(caveName);
}



bool CheckIfDoubleLowerCaseIsAlreadyThere(vector<string> path){
    for (int i =1; i < path.size(); i++){
        string currPath = path.at(i);
        int total = 0;
        if (isupper( currPath.at(0) ) != true ){ //its lowercase
            for (int j = i; j < path.size(); j++){
                if (path.at(j) == currPath){
                    total +=1;
                    if (total == 2){
                        return true;
                    }
                }

            }

        }
    }

    return false;

}


bool CheckIfLowerCaseIsPresent(string caveName, vector<string> path){
    char firstLetter = caveName.at(0);
    int totalVisits = 0;
    if (isupper(firstLetter) != true ){ //it's lowercase
        for (int i =0; i < path.size(); i++){
            if (caveName == path.at(i)){
                totalVisits+=1;

            }
        }
        if (totalVisits == 0){
            return false;
        }
        else if (totalVisits == 1){
            if (CheckIfDoubleLowerCaseIsAlreadyThere(path)){
                return true;
            }
        } else if (totalVisits == 2) {
            return true;
        }


    }


    return false;
}




vector<string> GetAllPossibleNextLinks(string connection1, vector<vector<string>> connections){
    vector<string> nextPoints;

    bool thereIsAnEnd = false;

    for (int i =0; i < connections.size(); i++){
        vector<string> currPath = connections.at(i);
        if (currPath.at(0) == connection1){

            if (currPath.at(1) == "end"){
                thereIsAnEnd = true;
            } else{
                nextPoints.push_back(currPath.at(1));
            }

        } else if (currPath.at(1) == connection1){

            if (currPath.at(0) == "end"){
                thereIsAnEnd = true;
            } else{
                nextPoints.push_back(currPath.at(0));
            }
        }
    }

    if (thereIsAnEnd){
        nextPoints.push_back("end");
    }


    return nextPoints;
}

vector<string> GetVectorOfLinks(string connection1, vector<vector<string>> connections){
    vector<string> nextPoints;
    for (int i =0; i < connections.size(); i++){
        vector<string> currPath = connections.at(i);
        if (currPath.at(0) == connection1){
            nextPoints.push_back(currPath.at(1));
        } else if (currPath.at(1) == connection1){
            nextPoints.push_back(currPath.at(0));
        }
    }
    return nextPoints;
}

void FindAPathThrough(vector<string> &myPath, vector<vector<string>> &connections, long & total, map<string, vector<string>> graph){
    vector<string> links =  graph[myPath.at(myPath.size() - 1)];
    //add links in path
    int sizeLink = links.size();
    for (int i =0; i < sizeLink; i++){
        string currCaveName = links.at(i);
        if (links.at(i) == "end"){
            //PrintVect(myPath);
            total++;
            return;
        }
        else if ( currCaveName == "start"){
            continue;
            //don't do anything
            //because it would be start a start a start a
        } else if (CheckIfLowerCaseIsPresent(currCaveName, myPath)){
            continue;
            //don't do anything,
            // basically it checks if the we are adding is lowercase, and if it is, if it's already in it
        } else {
            myPath.push_back(links.at(i));
            FindAPathThrough(myPath, connections, total, graph);
            myPath.pop_back();

        }
    }

}




int main() {
    vector<string> input = ReadTheInput();
    vector<vector<string>> connections;
    vector<string> caveNames;
    map<string,vector<string>> graph;
    vector<int> visits;

    //Set up the thing
    //I have a vector of vectors for path connections
    //And then a vector of all the path names.
    for (int i =0; i < INPUT_SIZE; i++){
        string currLine = input.at(i);
        int pos = currLine.find("-");
        string point1 = currLine.substr(0,pos);
        currLine.erase(0, pos+1);
        string point2 = currLine;
        connections.push_back({point1, point2});
        AddIfNoDuplicates(point1, caveNames);
        AddIfNoDuplicates(point2, caveNames);
    }

    for (int i =0; i < caveNames.size(); i++){
        graph[caveNames.at(i)] = GetAllPossibleNextLinks(caveNames.at(i), connections);
        cout << "here " << endl;
        visits.push_back(0);
    }

    vector<string> myPath;

    myPath.push_back("start");
    long total = 0;
    FindAPathThrough(myPath, connections, total, graph);
    cout << "total number of paths is " << total << endl;

    //54 and 36
    return 0;
}


